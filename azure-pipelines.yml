# trigger:
# - master

pool:
  vmImage: windows-latest

resources:
  repositories:
  - repository: MyGitHubRepo1 # The name used to reference this repository in the checkout step
    type: github
    endpoint: github.com_poyu-huang
    name: poyu-huang/CustomWebSite/BookmarkApp
    trigger:
    - master
  # - repository: MyGitHubRepo2 # The name used to reference this repository in the checkout step
  #   type: github
  #   endpoint: github.com_poyu-huang
  #   name: poyu-huang/CustomWebSite/BookmarkApp
  #   trigger:
  #   - master

# trigger:
#   # batch: true
#   branches:
#     include:
#     - master
#   paths:
#     include:
#       - CashApp
#       - BookmarkApp

# parameters:
#   - name: RestoreBuildProjects
#     type: string
#     values:
#     - '**/*.csproj'
#     - '!*Tests/*.csproj'

variables:
  buildConfiguration: 'Release'
  folders: 'BookmarkApp CashApp CashAppTests'

steps:
- checkout: MyGitHubRepo
# - checkout: none
# - script: |
#     git init
#     git sparse-checkout init --cone
#     git sparse-checkout add $(folders)
#     git remote add origin $(Build.Repository.Uri)
#     git config core.sparsecheckout true
#     git config gc.auto 0
#     git config --get-all http.$(Build.Repository.Uri).extraheader
#     git config --get-all http.proxy
#     git config http.version HTTP/1.1
#     git fetch --force --tags --prune --prune-tags --progress --no-recurse-submodules --verbose --depth=1 origin
#     git checkout --progress $(Build.SourceBranchName)
#   displayName: 'Clone Partial git repo'

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    # projects: '$(Parameters.RestoreBuildProjects)'
    projects: |
      **/*.csproj
      !*Tests/*.csproj

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: |
      **/*.csproj
      !*Tests/*.csproj
    arguments: '--configuration $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: false
    projects: |
      **/*.csproj
      !*Tests/*.csproj
    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
    zipAfterPublish: True

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()